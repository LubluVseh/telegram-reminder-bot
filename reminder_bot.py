from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime, timedelta
import asyncio

# –£–∫–∞–∂–∏ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7525745616:AAGOXdmThvJTWQmmK30skNLeLse6ImbbUh4'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DefaultBotProperties
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –≤ –ø–∞–º—è—Ç–∏)
reminders = {}  # –ö–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
user_states = {}  # –ö–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
    return builder.as_markup(resize_keyboard=True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder_button(message: Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )
    user_states[message.from_user.id] = {"step": "waiting_for_text"}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["step"] == "waiting_for_text")
async def process_reminder_text(message: Message):
    user_id = message.from_user.id
    user_states[user_id]["text"] = message.text
    user_states[user_id]["step"] = "waiting_for_time"

    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["step"] == "waiting_for_time")
async def process_reminder_time(message: Message):
    user_id = message.from_user.id
    time_str = message.text

    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        reminder_time = datetime.strptime(time_str, "%H:%M").time()
        now = datetime.now()

        # –í—ã—á–∏—Å–ª—è–µ–º datetime –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_datetime = datetime.combine(now.date(), reminder_time)
        if reminder_datetime < now:
            reminder_datetime += timedelta(days=1)  # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        new_reminder = {
            "text": user_states[user_id]["text"],
            "time": reminder_datetime
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
        if user_id not in reminders:
            reminders[user_id] = []
        reminders[user_id].append(new_reminder)

        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {new_reminder['text']} –≤ {reminder_time.strftime('%H:%M')}.",
            reply_markup=get_main_keyboard()
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        asyncio.create_task(send_reminder(user_id, new_reminder["text"], reminder_datetime))

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def show_reminders_button(message: Message):
    user_id = message.from_user.id

    if user_id in reminders and reminders[user_id]:
        reminders_list = "\n".join(
            f"{i + 1}. {reminder['text']} –≤ {reminder['time'].strftime('%H:%M')}"
            for i, reminder in enumerate(reminders[user_id])
        )
        await message.answer(
            f"–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminders_list}",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def delete_reminder_button(message: Message):
    user_id = message.from_user.id

    if user_id in reminders and reminders[user_id]:
        await message.answer(
            "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = {"step": "waiting_for_reminder_index"}
    else:
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("step") == "waiting_for_reminder_index")
async def process_reminder_index(message: Message):
    user_id = message.from_user.id
    try:
        index = int(message.text) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
        if 0 <= index < len(reminders[user_id]):
            deleted_reminder = reminders[user_id].pop(index)
            await message.answer(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {deleted_reminder['text']} –≤ {deleted_reminder['time'].strftime('%H:%M')}.",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(user_id: int, text: str, reminder_datetime: datetime):
    now = datetime.now()
    delay = (reminder_datetime - now).total_seconds()

    if delay > 0:
        await asyncio.sleep(delay)  # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await bot.send_message(
            user_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
            reply_markup=get_main_keyboard()
        )

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if user_id in reminders:
        reminders[user_id] = [
            reminder for reminder in reminders[user_id]
            if reminder["time"] != reminder_datetime
        ]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())